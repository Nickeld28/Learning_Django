from django.db import models

"""
Мы создали класс с именем Topic, наследующий от Model — родительского класса, включенного в Django
и определяющего базовую функциональность модели. В класс Topic добавляются два атрибута: text и date_added.
"""


class Topic(models.Model):
    """ Тема, которую изучает пользователь """
    text = models.CharField(max_length=200)
    date_added = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        """ Возвращает строковое представление модели """
        return self.text


class Entry(models.Model):  # наследует от базового класса Model
    """ Информация, изученная пользователем по теме """
    # Внешний ключ (foreign key) содержит ссылку на другую запись в базе данных.
    # Каждая запись связывается с конкретной темой.
    # Каждой теме при создании присваивается ключ, или идентификатор.
    # Аргумент on_delete=models.CASCADE сообщает Django, что при удалении темы все записи,
    # связанные с этой темой, также должны быть удалены (это называется каскадным удалением).
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)
    text = models.TextField()  # Полю такого типа ограничение размера не требуется
    # Атрибут date_added позволяет отображать записи в порядке их создания и снабжать каждую запись временной меткой.
    date_added = models.DateTimeField(auto_now_add=True)

    class Meta:  # класс Meta вкладывается в класс Entry
        """ Класс Meta хранит дополнительную информацию по управлению моделью;
        в данном случае он позволяет задать специальный атрибут,
        который приказывает Django использовать форму множественного числа Entries при обращении
        более чем к одной записи. (Без этого Django будет использовать неправильную форму Entrys.)
        """
        verbose_name_plural = 'entries'

    def __str__(self):
        """ Возвращает строковое представление модели.
        Метод __str__() сообщает Django, какая информация должна отображаться при обращении к отдельным записям.
        Так как запись может быть достаточно длинным блоком текста, мы приказываем Django выводить
        только первые 50 символов. Также добавляется многоточие — признак вывода неполного текста.
        """
        if len(str(self.text)) > 50:
            return f"{self.text[:50]}..."
        return self.text
