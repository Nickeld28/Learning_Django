    Cоздаем новый проект PyCharm, в нем должно быть установлено и активировано виртуальное окружение.

    Включаем систему контроля версий VCS (GIT), создаем файл .gitignore и вносим исключения

    Дальнейшие действия выполняем в активированной виртуальной среде.

    Установка Django:

pip install django

    Делаем коммит:

git commit

    Импортируем проект в удаленный репозиторий:

PyCharm -> VSC -> Import into Version Control -> Share Project on GitHub

    Cоздаем папку с именем learning_log и в ней создаем проект с именем learning_log (с точкой в конце):

django-admin startproject learning_log .

    Django создает новый каталог с именем learning_log. Также создается файл manage.py — короткая программа, которая
    получает команды и передает их соответствующей части Django для выполнения.
    Мы используем эти команды для управления такими задачами, как работа с базами данных и запуск серверов.
    В каталоге learning_log находятся четыре файла, важнейшими из которых являются settings.py, urls.py и wsgi.py.
    Файл settings.py определяет то, как Django взаимодействует с вашей системой и управляет вашим проектом.
    Мы изменим некоторые из существующих настроек и добавим несколько новых настроек в ходе разработки проекта.
    Файл urls.py сообщает Django, какие страницы следует строить в ответ на запросы браузера.
    Файл wsgi.py помогает Django предоставлять созданные файлы (имя файла является сокращением от «Web Server Gateway
    Interface»).

    Создание базы данных
    Так как Django хранит большую часть информации в базе данных, относящейся к проекту,
    на следующем этапе необходимо создать базу данных, с которой Django сможет работать.
    Введите следующую команду (все еще не покидая активную среду):

python manage.py migrate

    Каждое изменение базы данных называется миграцией. Первое выполнение команды migrate приказывает Django проверить,
    что база данных соответствует текущему состоянию проекта. Когда мы впервые выполняем эту команду в новом проекте
    с использованием SQLite (вскоре мы расскажем о SQLite более подробно), Django создает новую базу данных за нас.
    Django сообщает о создании и подготовке базы данных к хранению информации, необходимой для выполнения
    административных операций и аутентификации.

    В активной виртуальной среде для выполнения команд manage.py используется команда python, даже если для запуска
    других программ вы используете другую команду (например, python3). В виртуальной среде команда python относится
    к версии Python, создавшей виртуальную среду.

    Убедимся в том, что проект был создан правильно. Введите команду для просмотра текущего состояния проекта:

python manage.py runserver

    Django запускает сервер, называемый сервером разработки, чтобы вы могли просмотреть проект в своей системе и
    проверить, как он работает.

    http://127.0.0.1:8000/ означает, что проект ведет прослушивание запросов на порте 8000 локального хоста.
    Термином «локальный хост» (localhost, он же http://localhost:8000) обозначается сервер, который обрабатывает
    только запросы вашей системы; он не позволяет никому другому просмотреть разрабатываемые страницы.
    Если вы получаете сообщение об ошибке «Порт уже используется», прикажите Django использовать другой порт;
    для этого введите команду python manage.py runserver 8001 и продолжайте перебирать номера портов по возрастанию,
    пока не найдете открытый порт.

    Чтобы остановить сервер, нужно в терминале, где был запущен сервер нажать комбинацию клавиш:

Ctrl+C

    Проект Django представляет собой группу отдельных приложений, совместная работа которых обеспечивает работу
    проекта в целом. Пока мы создадим одно приложение, которое будет выполнять большую часть работы в нашем проекте.

    Оставьте сервер разработки выполняться в терминальном окне, открытом ранее. Откройте новое терминальное окно
    (или вкладку) и перейдите в каталог learning_log. Активизируйте виртуальную среду и выполните команду:

python manage.py startapp learning_logs

    Команда startapp имя_приложения приказывает Django создать инфраструктуру, необходимую для построения приложения.
    Заглянув сейчас в каталог проекта, вы найдете в нем новый подкаталог с именем learning_logs. Откройте этот каталог,
    чтобы увидеть, какие файлы были созданы Django. Самые важные файлы в этом каталоге — models.py, admin.py и views.py.
    Файл models.py будет использоваться для определения данных, которыми нужно управлять в нашем приложении. К файлам
    admin.py и views.py мы вернемся позднее.

    Модуль с именем models импортируется автоматически, и нам предлагается создать свои модели. Модель сообщает Django,
    как работать с данными, которые будут храниться в приложении. С точки зрения кода модель представляет собой обычный
    класс; она содержит атрибуты и методы, как и все остальные классы, рассматривавшиеся нами ранее.
    Откроем файл models.py и создадим класс Topic - модель тем обсуждения, которые будут сохраняться пользователями.

    В файле setting.py есть секретный ключ, который необходимо держать в безопасности и никому не показывать, а также
    не рекомендуется его хранить в репозитории. Лучше его хранить как переменную окружения. В операционной системе
    windows ее можно сохранить так:

Панель управления\Все элементы панели управления\Система -> Дополнительные параметры системы -> Переменные среды ->
-> Переменные среды для пользователя -> Создать -> Новая пользовательская переменная -> Имя: SECRET_KEY, Значение: ...

    В settings.py доваляем import os и и вместо значения ключа ставим SECRET_KEY = os.environ.get("SECRET_KEY")

    Но если в проекте установлено виртуальное окружение как в нашем случае, то этот способ не будет работать.

    Можно установить библиотеку decouple и сделать с ее помощью:

pip install python-decouple

    в файле settings.py добавить строку:

from decouple import config

    исправить значения SECRET_KEY и DEBUG:

SECRET_KEY = config("SECRET_KEY")
DEBUG = config("DEBUG", cast=bool)

    Создать отдельно лежащий файл в удобном месте .env и в него добавить:

SECRET_KEY=******  # вместо звездочек значение ключа без кавычек
DEBUG=True  # или False, когда будет нужно

    Добавить файл .env в .gitignore обязательно.
